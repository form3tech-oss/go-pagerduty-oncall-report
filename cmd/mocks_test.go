// Code generated by mockery v2.14.0. DO NOT EDIT.

package cmd

import (
	"github.com/form3tech-oss/go-pagerduty-oncall-report/api"

	mock "github.com/stretchr/testify/mock"
)

// client is an autogenerated mock type for the client type
type clientMock struct {
	mock.Mock
}

// GetSchedule provides a mock function with given fields: scheduleID, startDate, endDate
func (_m *clientMock) GetSchedule(scheduleID string, startDate string, endDate string) (*api.Schedule, error) {
	ret := _m.Called(scheduleID, startDate, endDate)

	var r0 *api.Schedule
	if rf, ok := ret.Get(0).(func(string, string, string) *api.Schedule); ok {
		r0 = rf(scheduleID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(scheduleID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields:
func (_m *clientMock) ListUsers() ([]*api.User, error) {
	ret := _m.Called()

	var r0 []*api.User
	if rf, ok := ret.Get(0).(func() []*api.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields:
func (_m *clientMock) ListTeams() ([]*api.Team, error) {
	ret := _m.Called()

	var r0 []*api.Team
	if rf, ok := ret.Get(0).(func() []*api.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: _a0
func (_m *clientMock) ListServices(_a0 string) ([]*api.Service, error) {
	ret := _m.Called(_a0)

	var r0 []*api.Service
	if rf, ok := ret.Get(0).(func(string) []*api.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedules provides a mock function with given fields:
func (_m *clientMock) ListSchedules() ([]*api.Schedule, error) {
	ret := _m.Called()

	var r0 []*api.Schedule
	if rf, ok := ret.Get(0).(func() []*api.Schedule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
