// Code generated by mockery v2.14.0. DO NOT EDIT.

package api

import (
	pagerduty "github.com/PagerDuty/go-pagerduty"
	mock "github.com/stretchr/testify/mock"
)

// client is an autogenerated mock type for the client type
type clientMock struct {
	mock.Mock
}

// GetSchedule provides a mock function with given fields: id, o
func (_m *clientMock) GetSchedule(id string, o pagerduty.GetScheduleOptions) (*pagerduty.Schedule, error) {
	ret := _m.Called(id, o)

	var r0 *pagerduty.Schedule
	if rf, ok := ret.Get(0).(func(string, pagerduty.GetScheduleOptions) *pagerduty.Schedule); ok {
		r0 = rf(id, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.Schedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pagerduty.GetScheduleOptions) error); ok {
		r1 = rf(id, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id, o
func (_m *clientMock) GetUser(id string, o pagerduty.GetUserOptions) (*pagerduty.User, error) {
	ret := _m.Called(id, o)

	var r0 *pagerduty.User
	if rf, ok := ret.Get(0).(func(string, pagerduty.GetUserOptions) *pagerduty.User); ok {
		r0 = rf(id, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pagerduty.GetUserOptions) error); ok {
		r1 = rf(id, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedules provides a mock function with given fields: o
func (_m *clientMock) ListSchedules(o pagerduty.ListSchedulesOptions) (*pagerduty.ListSchedulesResponse, error) {
	ret := _m.Called(o)

	var r0 *pagerduty.ListSchedulesResponse
	if rf, ok := ret.Get(0).(func(pagerduty.ListSchedulesOptions) *pagerduty.ListSchedulesResponse); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.ListSchedulesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pagerduty.ListSchedulesOptions) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: o
func (_m *clientMock) ListServices(o pagerduty.ListServiceOptions) (*pagerduty.ListServiceResponse, error) {
	ret := _m.Called(o)

	var r0 *pagerduty.ListServiceResponse
	if rf, ok := ret.Get(0).(func(pagerduty.ListServiceOptions) *pagerduty.ListServiceResponse); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.ListServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pagerduty.ListServiceOptions) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields: o
func (_m *clientMock) ListTeams(o pagerduty.ListTeamOptions) (*pagerduty.ListTeamResponse, error) {
	ret := _m.Called(o)

	var r0 *pagerduty.ListTeamResponse
	if rf, ok := ret.Get(0).(func(pagerduty.ListTeamOptions) *pagerduty.ListTeamResponse); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.ListTeamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pagerduty.ListTeamOptions) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: o
func (_m *clientMock) ListUsers(o pagerduty.ListUsersOptions) (*pagerduty.ListUsersResponse, error) {
	ret := _m.Called(o)

	var r0 *pagerduty.ListUsersResponse
	if rf, ok := ret.Get(0).(func(pagerduty.ListUsersOptions) *pagerduty.ListUsersResponse); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagerduty.ListUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pagerduty.ListUsersOptions) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
